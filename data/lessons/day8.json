{
  "title": "Dia 8 – Funções: Como criar e usar",
  "concepts": [
    {
      "type": "explanation",
      "heading": "O que é uma função?",
      "text": "Oi! Hoje você vai aprender a usar uma coisa super poderosa na programação: as <b>funções</b>! Imagina que você tem um botão que faz algo legal toda vez que aperta. Uma função é como esse botão mágico: você escreve o que ela faz uma vez, e pode apertar (ou chamar) quantas vezes quiser!"
    },
    {
      "type": "image",
      "heading": "Superpoderes com funções",
      "image_placeholder": "imagem de um personagem com capa e poderes ativados por botões com nomes como 'voar()', 'invisivel()'",
      "image_url": "resources/images/lesson_illustrations/lesson_8_function.jpg"
    },
    {
      "type": "explanation",
      "heading": "Como funciona uma função em Python",
      "text": "Uma função tem 3 partes principais:<br><br>1. A palavra <b>def</b> para dizer que está definindo uma função.<br>2. Um <b>nome</b> que você escolhe para a função.<br>3. Parênteses <b>()</b>, que podem ter ou não valores dentro (os parâmetros), seguidos de dois pontos <b>:</b>.<br><br>Depois, tudo que estiver com um espacinho (indentado) dentro da função mostra o que ela faz: são os comandos que vão acontecer quando ela for chamada. Para <b>usar</b> essa função, você chama ela pelo nome!",
      "code": "def diga_ola():\n    print(\"Olá!\")\n    print(\"Tudo bem com você?\")\n\ndiga_ola()"
    },
    {
      "type": "step",
      "heading": "Passo a passo para criar uma função",
      "steps": [
        "1. Escreva 'def' e o nome da função, com parênteses e dois pontos.",
        "2. Dentro dela, escreva o que você quer que aconteça (indentado).",
        "3. Fora da função, escreva o nome dela para rodar!"
      ]
    },
    {
      "type": "code",
      "heading": "Função simples chamada várias vezes",
      "text": "Veja como uma função pode ser chamada várias vezes para repetir um bloco de código:",
      "code": "def diga_ola():\n    print(\"Olá!\")\n    print(\"Tudo bem com você?\")\n\ndiga_ola()\ndiga_ola()\ndiga_ola()"
    },
    {
      "type": "question",
      "heading": "DÚVIDA COMUM: Por que não apareceu nada?",
      "text": "Por que, as vezes, depois de criar a função, não aparece nada na tela? Se você só criou a função e não chamou ela, nada acontece. Teste no Thonny deixando só a definição da função e veja o que acontece."
    },
    {
      "type": "explanation",
      "heading": "Funções com espaços em branco (parâmetros)",
      "text": "Podemos deixar a função mais flexível criando um espaço para preencher depois, como 'nome'. Isso é um <b>parâmetro</b>. Assim a mesma função pode falar com várias pessoas!"
    },
    {
      "type": "code",
      "heading": "Usando parâmetro na função",
      "code": "def diga_ola_para(nome):\n    print(f\"Olá, {nome}! Tudo bem?\")\n\ndiga_ola_para(\"João\")\ndiga_ola_para(\"Maria\")\ndiga_ola_para(\"Lucas\")"
    },
    {
      "type": "code",
      "heading": "Chamando a função e preenchendo o espaço",
      "code": "diga_ola_para(\"João\")\ndiga_ola_para(\"Maria\")\ndiga_ola_para(\"Lucas\")"
    },
    {
      "type": "explanation",
      "heading": "Por que isso é útil?",
      "text": "Isso faz com que a mesma função funcione para vários casos diferentes. Em vez de escrever 10 vezes 'print(\"Olá, João!\")', 'print(\"Olá, Maria!\")'... podemos usar a mesma função com valores diferentes."
    },
    {
      "type": "code",
      "heading": "Teste no Thonny!",
      "text": "Copie isso no Thonny e rode. Veja como a função faz a mesma coisa, mas muda a mensagem conforme o valor passado para o parâmetro!",
      "code": "def elogio(nome):\n    print(nome, \"é muito inteligente!\")\n\nelogio(\"Ana\")\nelogio(\"Pedro\")\nelogio(\"Júlia\")"
    },
    {
      "type": "summary",
      "heading": "Resumo simples sobre parâmetros",
      "text": "1️⃣ O parâmetro é um espaço reservado.\n2️⃣ Quando chamamos a função, colocamos um valor nesse espaço.\n3️⃣ Esse valor é usado dentro da função.\n4️⃣ Assim, a função pode ter vários resultados diferentes!"
    },
    {
      "type": "explanation",
      "heading": "Funções que devolvem um valor (return)",
      "text": "Com <b>return</b> a função devolve um valor para você guardar e usar depois. É como uma máquina de suco: você coloca fruta, ela entrega o suco!"
    },
    {
      "type": "code",
      "heading": "Função com return",
      "code": "def somar(a, b):\n    return a + b\n\nresultado = somar(5, 3)\nprint(\"A soma é:\", resultado)"
    },
    {
      "type": "question",
      "heading": "Por que usar return?",
      "text": "Com return, podemos fazer contas, verificações e devoluções que serão usadas depois. Isso deixa o código mais organizado, fácil de testar e reutilizar. Funções com return são como uma máquina que faz algo e te entrega o resultado."
    },
    {
      "type": "explanation",
      "heading": "Diferença entre print e return",
      "text": "O <b>print</b> serve para <b>mostrar</b> algo na tela. Ele escreve a mensagem para o usuário ver, mas não guarda nada para o programa usar depois.<br><br>O <b>return</b> serve para <b>devolver</b> um valor que pode ser usado mais tarde. É como responder a uma pergunta e guardar a resposta numa caixa (variável), para poder usar depois no seu código.<br><br>Imagine que o <b>print</b> é como gritar uma resposta para o mundo ouvir, e o <b>return</b> é como escrever essa resposta num bilhete e guardar no bolso!",
      "code": "def teste_print():\n    print(\"Isso é um print\")\n\ndef teste_return():\n    return \"Isso é um return\"\n\nx = teste_print()\ny = teste_return()\n\nprint(\"x:\", x)\nprint(\"y:\", y)"
    },
    {
      "type": "explanation",
      "heading": "Usando input dentro da função",
      "text": "Podemos combinar tudo e usar input para pegar um número e calcular com função!"
    },
    {
      "type": "code",
      "heading": "Dobro com input",
      "code": "def dobro(n):\n    return n * 2\n\nnumero = int(input(\"Digite um número: \"))\nresultado = dobro(numero)\nprint(\"O dobro é:\", resultado)"
    },
    {
      "type": "summary",
      "heading": "Resumo simples sobre return",
      "text": "1️⃣ return devolve um valor da função.\n2️⃣ Esse valor pode ser guardado em uma variável.\n3️⃣ Usamos depois do return o que queremos que a função entregue.\n4️⃣ print mostra na tela, return entrega um valor."
    },
    {
      "type": "code",
      "heading": "Combinando tudo o que já aprendemos",
      "code": "def verifica_maioridade(idade):\n    if idade >= 18:\n        return \"Você é maior de idade!\"\n    else:\n        return \"Você ainda é menor de idade.\"\n\nidade_usuario = int(input(\"Quantos anos você tem? \"))\nmensagem = verifica_maioridade(idade_usuario)\nprint(mensagem)"
    }
  ],
  "exercises": [
    {
      "type": "exercise",
      "prompt": "Crie uma função que diga 'Você é incrível!' três vezes.",
      "code_hint": "Dica: use def e chame a função várias vezes."
    },
    {
      "type": "exercise",
      "prompt": "Crie uma função chamada 'dobro' que receba um número e devolva ele multiplicado por 2. (Tente uma função que chama o triplo, depois)",
      "code_hint": "Use def, parâmetro, return e depois chame a função."
    },
    {
      "type": "exercise",
      "prompt": "Peça para o usuário digitar um número e mostre o dobro dele usando a função.",
      "code_hint": "Use input(), int() e print()."
    },
    {
      "type": "exercise",
      "prompt": "Crie uma função que receba o nome de alguém e diga uma frase especial, como 'Pedro é um superprogramador!'.",
      "code_hint": "Lembre-se de dar um nome pra sua função. Use f-strings para incluir o nome na frase."
    }
  ],
  "project": {
    "type": "project",
    "name": "Função Mágica",
    "description": "Invente sua própria função mágica! Pode ser uma que calcula pontos de um jogo, faz um elogio, escolhe uma missão ou combina frases malucas.",
    "goal": "Criar uma função com parâmetros e return, testando com diferentes valores."
  },
  "video_suggestion": {
    "type": "video",
    "text": "Funções em Python para Iniciantes (em português):",
    "url": "https://youtu.be/jy2qX22dSjM?si=f_t_mi40McBPGtaK"
  }
}
