{
  "title": "Dia 16 ‚Äì Introdu√ß√£o √† Programa√ß√£o Orientada a Objetos (POO)",
  "concepts": [
    {
      "type": "explanation",
      "heading": "O que √© POO?",
      "text": "Oi, meu pequeno programador! üòÑ Hoje vamos aprender um jeito diferente de programar: a Programa√ß√£o Orientada a Objetos (POO). Sabe quando voc√™ brinca de montar seus pr√≥prios brinquedos? Cada um tem sua cor, tamanho e faz alguma coisa diferente, n√©? Pois √©, a POO faz a mesma coisa no c√≥digo: cria 'brinquedos' digitais com suas pr√≥prias caracter√≠sticas e a√ß√µes. Vamos juntos montar nossos pr√≥prios personagens no Python!"
    },
    {
      "type": "image",
      "heading": "Como funcionam os objetos",
      "image_placeholder": "imagem de brinquedos (como carrinhos) com etiquetas como 'cor', 'velocidade', 'som'",
      "image_url": "resources/images/lesson_illustrations/lesson_16_cars.jpg"
    },
    {
      "type": "explanation",
      "heading": "Classe e Objeto ‚Äì Carrinho de Lego Digital!",
      "text": "Pensa assim: a **classe** √© como um manual de instru√ß√µes de Lego para montar um carrinho. Ele te ensina como o carrinho pode ser: com 3 rodas, cor azul, tamanho pequeno... Mas s√≥ com o manual, voc√™ ainda n√£o tem um carrinho real, n√©?\n\nQuando voc√™ segue esse manual e monta o carrinho, a√≠ sim! Voc√™ tem um **objeto** ‚Äì um carrinho √∫nico feito com suas pr√≥prias pe√ßas. E cada carrinho pode ser diferente, mesmo usando o mesmo manual. Legal, n√©?"
    },
    {
      "type": "code",
      "heading": "Criando uma classe vazia (s√≥ o chassi do carrinho)",
      "text": "Vamos come√ßar s√≥ com a estrutura do carrinho, sem nada dentro. Copie isso no Thonny:",
      "code": "class Carrinho:\n    def __init__(self):\n        pass"
    },
    {
      "type": "explanation",
      "heading": "Adicionando caracter√≠sticas ao carrinho (atributos)",
      "text": "Todo carrinho tem caracter√≠sticas como cor, tamanho e n√∫mero de rodas. Essas caracter√≠sticas s√£o chamadas de **atributos**. No Python, a gente coloca isso dentro do `__init__`, usando `self` para guardar essas informa√ß√µes em cada carrinho."
    },
    {
      "type": "code",
      "heading": "Classe com atributos",
      "text": "Veja como fazer um carrinho com cor, tamanho e n√∫mero de rodas:",
      "code": "class Carrinho:\n    def __init__(self, cor, tamanho, rodas):\n        self.cor = cor\n        self.tamanho = tamanho\n        self.rodas = rodas"
    },
    {
      "type": "explanation",
      "heading": "Agora vamos fazer o carrinho fazer algo! (m√©todos)",
      "text": "Al√©m de ter cor e tamanho, nosso carrinho pode **fazer coisas**. Essas a√ß√µes s√£o chamadas de **m√©todos**. A gente cria m√©todos como fun√ß√µes normais dentro da classe. Por exemplo, um carrinho pode buzinar!"
    },
    {
      "type": "code",
      "heading": "Adicionando um m√©todo: buzinar",
      "text": "Veja como criar um carrinho que pode buzinar:",
      "code": "class Carrinho:\n    def __init__(self, cor, tamanho, rodas):\n        self.cor = cor\n        self.tamanho = tamanho\n        self.rodas = rodas\n\n    def buzinar(self):\n        print(f\"O carrinho {self.cor} est√° buzinando: Pii Pii!\")"
    },
    {
      "type": "instruction",
      "heading": "Criando e usando um carrinho",
      "text": "Agora vamos montar um carrinho vermelho, pequeno, com 3 rodas e fazer ele buzinar. Vamos juntos?",
      "code": "meu_carrinho = Carrinho(\"vermelho\", \"pequeno\", 3)\nmeu_carrinho.buzinar()"
    },
    {
      "type": "common_mistake",
      "heading": "Erro comum",
      "text": "√Äs vezes esquecemos de passar as informa√ß√µes certas na hora de montar o carrinho (como a cor e o tamanho). Isso faz o Python ficar confuso e dar erro. Sempre que voc√™ for criar um objeto, pense: 'Estou dizendo tudo que o carrinho precisa saber?'"
    },
    {
      "type": "curiosity",
      "heading": "Sabia que‚Ä¶?",
      "text": "Jogos como Minecraft e Roblox usam muito POO! Cada personagem, item ou efeito √© um objeto com seus pr√≥prios poderes. Agora voc√™ est√° entrando no mundo desses criadores!"
    },
    {
      "type": "question",
      "heading": "Pergunta para pensar",
      "text": "Voc√™ j√° brincou com bonecos, carrinhos ou avi√µes? Que a√ß√µes eles fazem? E quais caracter√≠sticas eles t√™m? Tente imaginar como voc√™ criaria eles no Python!"
    },
    {
      "type": "step",
      "heading": "Passo a passo",
      "steps": [
        "1. Abra o Thonny.",
        "2. Crie um novo arquivo chamado carrinho.py.",
        "3. Escreva a classe Carrinho com __init__ e o m√©todo buzinar().",
        "4. Crie um objeto usando Carrinho(\"vermelho\", \"pequeno\", 3).",
        "5. Fa√ßa o carrinho buzinar com meu_carrinho.buzinar().",
        "6. Clique em Executar e veja a m√°gica acontecer!"
      ]
    },
    {
      "type": "summary",
      "heading": "Resumo da aula",
      "text": "Hoje voc√™ aprendeu que uma **classe** √© o molde (como uma receita ou manual de Lego) e o **objeto** √© o brinquedo montado com esse molde. Aprendeu tamb√©m a dar caracter√≠sticas ao seu brinquedo (atributos) e fazer ele agir (m√©todos)."
    },
    {
      "type": "celebration",
      "heading": "Voc√™ conseguiu!",
      "text": "Uhuu! üéâ Voc√™ criou seu primeiro objeto com Python. Isso √© um passo de gigante no mundo da programa√ß√£o. Parab√©ns por sua dedica√ß√£o! Estou muito orgulhoso de voc√™! üíô"
    }
  ],
  "exercises": [
    {
      "type": "exercise",
      "prompt": "Crie uma classe chamada Bola com atributos 'cor' e 'tamanho', e um m√©todo 'quicar' que imprime uma mensagem.",
      "code_hint": "Dica: use __init__ para cor e tamanho, e defina um m√©todo que fa√ßa print(\"A bola est√° quicando!\")"
    },
    {
      "type": "exercise",
      "prompt": "Crie duas bolas com cores diferentes e fa√ßa cada uma quicar.",
      "code_hint": "Dica: crie algo como bola1 = Bola(\"vermelha\", \"grande\") e bola2 = Bola(\"azul\", \"pequena\")"
    },
    {
      "type": "exercise",
      "prompt": "Crie uma classe chamada Aluno com os atributos 'nome', 'idade' e 'apelido'. Depois, crie um aluno chamado Jo√£o, com 9 anos e apelido 'Juju'.",
      "code_hint": "Dica: use o __init__ com self.nome, self.idade e self.apelido. Depois, use aluno = Aluno(\"Jo√£o\", 9, \"Juju\")"
    }
  ],
  "project": {
    "type": "project",
    "name": "Meu pr√≥prio brinquedo com POO",
    "description": "Invente um brinquedo (como um Cachorro, Avi√£o ou Boneca). Crie uma classe com atributos como cor, nome ou for√ßa, e um comportamento divertido como 'voar', 'falar' ou 'latir'.",
    "goal": "Criar uma classe com pelo menos 2 atributos e 1 m√©todo. Depois, crie um objeto e teste esse comportamento no Thonny."
  },
  "video_suggestion": {
    "type": "video",
    "text": "Veja esse v√≠deo curtinho mostrando como usar classes e objetos em Python de um jeito divertido:",
    "url": "https://www.youtube.com/embed/ZDa-Z5JzLYM"
  }
}
