{
  "title": "Dia 16 ‚Äì Her√≥is e Monstros: Criando com Objetos",
  "concepts": [
    {
      "type": "explanation",
      "heading": "O que √© Programa√ß√£o Orientada a Objetos?",
      "text": "Oi, meu pequeno programador! üòÑ Hoje vamos aprender um jeito novo e m√°gico de programar: a Programa√ß√£o Orientada a Objetos. √â como se voc√™ pudesse construir seus pr√≥prios brinquedos no c√≥digo, com poderes, cores, formas e at√© a√ß√µes! Pronto para criar seus her√≥is e monstros? Vamos juntos!"
    },
    {
      "type": "image",
      "heading": "Objetos com personalidade",
      "image_placeholder": "imagem de brinquedos ou personagens com etiquetas como 'nome', 'poder', 'energia'",
      "image_url": "resources/images/lesson_illustrations/lesson_16_objects.jpg"
    },
    {
      "type": "explanation",
      "heading": "Classe e Objeto ‚Äì Carrinho de Lego Digital!",
      "text": "Pensa assim: uma <b>classe</b> √© como o manual de instru√ß√µes para montar um brinquedo de Lego. J√° o <b>objeto</b> √© o brinquedo que voc√™ realmente monta com suas pe√ßas.\n\nVoc√™ pode usar o mesmo manual v√°rias vezes e fazer carrinhos diferentes! No c√≥digo √© igual: a classe √© o plano, e o objeto √© o resultado!"
    },
    {
      "type": "code",
      "heading": "Come√ßando com uma classe vazia",
      "text": "Vamos criar uma classe chamada Carrinho, ainda sem nada dentro. S√≥ para ver como se faz:",
      "code": "class Carrinho:\n    def __init__(self):\n        pass"
    },
    {
      "type": "explanation",
      "heading": "Adicionando caracter√≠sticas ao carrinho (atributos)",
      "text": "Agora vamos dar uma cor, um tamanho e n√∫mero de rodas ao nosso carrinho. Essas caracter√≠sticas s√£o chamadas de <b>atributos</b>. A gente usa o <b>self</b> para guardar essas informa√ß√µes dentro do carrinho."
    },
    {
      "type": "code",
      "heading": "Classe com atributos",
      "text": "Veja como dar vida ao carrinho:",
      "code": "class Carrinho:\n    def __init__(self, cor, tamanho, rodas):\n        self.cor = cor\n        self.tamanho = tamanho\n        self.rodas = rodas"
    },
    {
      "type": "explanation",
      "heading": "Fazendo o carrinho fazer algo (m√©todos)",
      "text": "Agora vamos fazer o carrinho <b>buzinar</b>! Isso √© uma <b>a√ß√£o</b>, ou seja, um <b>m√©todo</b>. M√©todos s√£o fun√ß√µes que moram dentro da classe."
    },
    {
      "type": "code",
      "heading": "M√©todo buzinar",
      "text": "Veja como criamos um m√©todo simples:",
      "code": "class Carrinho:\n    def __init__(self, cor, tamanho, rodas):\n        self.cor = cor\n        self.tamanho = tamanho\n        self.rodas = rodas\n\n    def buzinar(self):\n        print(f\"O carrinho {self.cor} est√° buzinando: Pii Pii!\")"
    },
    {
      "type": "instruction",
      "heading": "Testando o carrinho",
      "text": "Agora vamos montar um carrinho vermelho, pequeno, com 3 rodas e fazer ele buzinar:",
      "code": "meu_carrinho = Carrinho(\"vermelho\", \"pequeno\", 3)\nmeu_carrinho.buzinar()"
    },
    {
      "type": "common_mistake",
      "heading": "Erro comum",
      "text": "Se esquecer de passar algum atributo como a cor ou o tamanho na hora de criar o objeto, o Python vai mostrar erro. Sempre confira se est√° dando todas as informa√ß√µes!"
    },
    {
      "type": "curiosity",
      "heading": "Sabia que‚Ä¶?",
      "text": "Jogos como Minecraft e Roblox s√£o cheios de objetos! Cada item, monstro ou jogador √© criado como uma classe com seus pr√≥prios poderes. Voc√™ est√° no caminho certo para criar mundos incr√≠veis!"
    },
    {
      "type": "question",
      "heading": "E se voc√™ criasse seu pr√≥prio personagem?",
      "text": "Como seria o seu her√≥i ou monstro? Qual seria o nome? Quais poderes ele teria? O que ele poderia fazer no jogo?"
    },
    {
      "type": "step",
      "heading": "Passo a passo da aula",
      "steps": [
        "1. Abra o Thonny.",
        "2. Crie um novo arquivo chamado objetos.py.",
        "3. Escreva a classe Carrinho com atributos e o m√©todo buzinar().",
        "4. Crie um objeto Carrinho com valores personalizados.",
        "5. Fa√ßa ele buzinar com o m√©todo.",
        "6. Experimente criar mais carrinhos diferentes!"
      ]
    },
    {
      "type": "summary",
      "heading": "Resumo da aula",
      "text": "Hoje voc√™ aprendeu o que √© uma <b>classe</b> e um <b>objeto</b>. Descobriu como dar caracter√≠sticas (atributos) e criar a√ß√µes (m√©todos) para seus brinquedos digitais. Estamos montando nosso pr√≥prio mundo no Python!"
    },
    {
      "type": "celebration",
      "heading": "Voc√™ est√° criando mundos!",
      "text": "Uhuuu! üéâ Parab√©ns por criar seus primeiros objetos em Python. Voc√™ deu vida ao seu c√≥digo! Agora vamos continuar criando juntos. üíô"
    }
  ],
  "exercises": [
    {
      "type": "exercise",
      "prompt": "Crie uma classe chamada Bola com atributos 'cor' e 'tamanho', e um m√©todo 'quicar' que imprime uma mensagem.",
      "code_hint": "Dica: use __init__ para cor e tamanho, e defina um m√©todo que fa√ßa print(\"A bola est√° quicando!\")"
    },
    {
      "type": "exercise",
      "prompt": "Crie duas bolas com cores diferentes e fa√ßa cada uma quicar.",
      "code_hint": "Dica: crie algo como bola1 = Bola(\"vermelha\", \"grande\") e bola2 = Bola(\"azul\", \"pequena\")"
    },
    {
      "type": "exercise",
      "prompt": "Crie uma classe chamada Aluno com os atributos 'nome', 'idade' e 'apelido'. Depois, crie um aluno chamado Jo√£o, com 9 anos e apelido 'Juju'.",
      "code_hint": "Dica: use o __init__ com self.nome, self.idade e self.apelido. Depois, use aluno = Aluno(\"Jo√£o\", 9, \"Juju\")"
    }
  ],
  "project": {
    "type": "project",
    "name": "Meu pr√≥prio personagem com POO",
    "description": "Invente um personagem (pode ser um Her√≥i, Monstro, Animal ou Rob√¥). Crie uma classe com atributos como nome, energia, cor ou for√ßa, e uma a√ß√£o como 'falar', 'atacar', ou 'se apresentar'.",
    "goal": "Criar uma classe com pelo menos 2 atributos e 1 m√©todo. Depois, crie um objeto e teste esse comportamento no Thonny. Voc√™ pode usar esse personagem no seu jogo nas pr√≥ximas aulas!"
  },
  "video_suggestion": {
    "type": "video",
    "text": "Veja esse v√≠deo curtinho mostrando como usar classes e objetos em Python de um jeito divertido:",
    "url": "https://www.youtube.com/embed/ZDa-Z5JzLYM"
  }
}
