{
  "title": "Dia 15 ‚Äì Calculadora com tratamento de erros",
  "concepts": [
    {
      "type": "celebration",
      "heading": "Erros acontecem!",
      "text": "Imagine que algu√©m te pe√ßa para dividir um n√∫mero por zero ou te entregue a palavra 'banana' quando voc√™ queria um n√∫mero. ü§Ø √â assim que os programas se sentem quando n√£o tratamos os erros! Nesta aula, vamos aprender a proteger nosso c√≥digo usando o `try` e o `except`, criando programas mais seguros e inteligentes."
    },
    {
      "type": "image",
      "heading": "Calculadora m√°gica para her√≥is",
      "image_placeholder": "imagem de uma calculadora com bot√µes divertidos como 'ataque', 'defesa', 'magia', usada por um her√≥i com capa",
      "image_url": "resources/images/lesson_illustrations/lesson_15_calculator.jpg"
    },
    {
      "type": "concept",
      "heading": "Por que tratar erros?",
      "text": "√Äs vezes, o usu√°rio digita algo errado ou o programa tenta fazer algo imposs√≠vel, como dividir por zero. Se n√£o tratarmos isso, o programa fecha com uma mensagem assustadora. üò® Com `try/except`, conseguimos lidar com essas situa√ß√µes de forma educada e continuar funcionando.",
      "steps": [
        "Quando um erro acontece, o Python normalmente para tudo e mostra uma mensagem feia.",
        "Com <code>try/except</code>, voc√™ consegue prever e controlar esses erros.",
        "Isso deixa seu programa mais seguro e amig√°vel para quem est√° usando."
      ]
    },
    {
      "type": "concept",
      "heading": "Como funciona o try/except?",
      "text": "Funciona assim: voc√™ tenta executar um bloco de c√≥digo com `try:`. Se der erro, o Python pula para o `except:`. Veja o passo a passo:"
    },
    {
      "type": "explanation",
      "heading": "Como funciona o try/except?",
      "text": "Imagine que voc√™ est√° tentando abrir uma porta. Se ela estiver trancada, voc√™ j√° tem uma chave reserva no bolso. O `try` √© como tentar abrir a porta, e o `except` √© o que fazer se ela estiver trancada.\n\nNo Python, usamos `try` para rodar um c√≥digo que pode dar erro, e `except` para capturar esse erro e reagir de forma inteligente, sem deixar o programa travar.",
      "steps": [
        "Escreva `try:` e logo abaixo, com indenta√ß√£o (espa√ßo), coloque o c√≥digo que pode dar erro.",
        "Em seguida, escreva `except:` e abaixo o que o programa deve fazer se der erro.",
        "Voc√™ pode especificar o tipo de erro, como `ValueError` ou `ZeroDivisionError`, para reagir de forma diferente a cada caso.",
        "Tudo o que estiver fora do bloco `try/except` continua rodando normalmente."
      ]
    },
    {
      "type": "explanation",
      "heading": "Tipos de erros que podemos tratar",
      "text": "Os erros mais comuns em programas simples s√£o digitar letras no lugar de n√∫meros (<code>ValueError</code>) e tentar dividir por zero (<code>ZeroDivisionError</code>). Podemos tratar cada um com um <code>except</code> diferente.",
      "steps": [
        "1. <code>ValueError</code>: quando tenta converter algo para n√∫mero e n√£o consegue.",
        "2. <code>ZeroDivisionError</code>: quando tenta dividir algo por zero.",
        "3. Voc√™ pode usar v√°rios <code>except</code> seguidos, um para cada tipo de erro."
      ]
    },
    {
      "type": "concept",
      "heading": "ü§î O que √© ValueError?",
      "text": "√â o nome que o Python d√° ao erro quando ele espera um valor (como um n√∫mero), mas recebe algo diferente (como uma palavra)."
    },
    {
      "type": "code",
      "heading": "Exemplo 1: n√∫mero inv√°lido",
      "text": "Esse c√≥digo tenta transformar um texto em n√∫mero. Se for uma letra, cai no <code>except</code>.",
      "code": "try:\n    x = int(input('Digite um n√∫mero: '))\n    print('Voc√™ digitou:', x)\nexcept ValueError:\n    print('Isso n√£o √© um n√∫mero v√°lido!')"
    },
    {
      "type": "concept",
      "heading": "ü§î O que √© ZeroDivisionError?",
      "text": "√â o nome que o Python d√° ao erro quando voc√™ tenta dividir um n√∫mero por zero. Isso √© bem ruim, pense que eles fizeram um erro s√≥ pra isso!"
    },
    {
      "type": "code",
      "heading": "Exemplo 2: divis√£o por zero",
      "text": "Aqui temos dois tipos de erro que podem acontecer: o usu√°rio pode digitar algo errado, ou tentar dividir por zero.",
      "code": "try:\n    a = int(input('Dividendo: '))\n    b = int(input('Divisor: '))\n    print('Resultado:', a / b)\nexcept ZeroDivisionError:\n    print('Erro: n√£o pode dividir por zero!')\nexcept ValueError:\n    print('Digite apenas n√∫meros inteiros!')"
    },
    {
      "type": "concept",
      "heading": "Step-by-step: tratando erro de divis√£o por zero",
      "steps": [
        "Pe√ßa dois n√∫meros com `input()` e transforme em `int()`.",
        "Tente fazer a divis√£o.",
        "Use `except ZeroDivisionError:` para capturar o erro se o divisor for zero.",
        "Adicione tamb√©m `except ValueError:` para erros de digita√ß√£o."
      ],
      "code": "try:\n    a = int(input(\"Dividendo: \"))\n    b = int(input(\"Divisor: \"))\n    print(\"Resultado:\", a / b)\nexcept ZeroDivisionError:\n    print(\"Erro: n√£o pode dividir por zero!\")\nexcept ValueError:\n    print(\"Digite apenas n√∫meros inteiros!\")"
    },
    {
      "type": "question",
      "heading": "ü§î D√∫vidas comuns",
      "text": "<b>1.</b> E se eu n√£o souber o tipo do erro? Use apenas `except:` (mas com cuidado!)\n<b>2.</b> Posso mostrar o erro real? Sim! Use `except ValueError as e:` e `print(e)`.\n<b>3.</b> Posso ter mais de um `except`? Sim, um para cada tipo de erro."
    },
    {
      "type": "question",
      "heading": "Existem outros tipos de erros al√©m de ValueError e ZeroDivisionError?",
      "text": "Sim! O Python tem v√°rios tipos de erro diferentes. Por exemplo:\n<ul><li><b>TypeError</b>: quando voc√™ tenta fazer uma opera√ß√£o entre tipos incompat√≠veis, como somar um n√∫mero com uma string.</li><li><b>IndexError</b>: quando voc√™ tenta acessar um √≠ndice que n√£o existe em uma lista.</li><li><b>KeyError</b>: quando tenta acessar uma chave que n√£o existe em um dicion√°rio.</li></ul>Quer ver a lista completa? Ela est√° na <a href=\"https://docs.python.org/3/library/exceptions.html\" target=\"_blank\">documenta√ß√£o oficial do Python</a>."
    },
    {
      "type": "concept",
      "heading": "Comparando: com e sem tratamento de erro",
      "text": "Sem `try/except`, o programa quebra. Com tratamento, o erro vira uma explica√ß√£o amig√°vel. O usu√°rio se sente acolhido e o programa continua funcionando! üí™"
    },
    {
      "type": "summary",
      "heading": "Resumo da Aula",
      "text": "<b>‚úî</b> Aprendemos o que s√£o erros e por que trat√°-los\n<b>‚úî</b> Usamos `try` e `except` para proteger nosso c√≥digo\n<b>‚úî</b> Lidamos com erros de valor e divis√£o por zero\n<b>‚úî</b> Descobrimos como deixar nossa calculadora mais segura e esperta"
    }
  ],
  "exercises": [
    {
      "type": "exercise",
      "prompt": "1. Pe√ßa um n√∫mero e mostre o dobro. Use `try/except` para avisar se n√£o for n√∫mero.",
      "code_hint": "Use a fun√ß√£o <code>int()</code> dentro do <code>try</code> e\n lembre-se de multiplicar por 2."
    },
    {
      "type": "exercise",
      "prompt": "2. Pe√ßa dois n√∫meros para divis√£o, trate `ValueError` e `ZeroDivisionError` separadamente.",
      "code_hint": "Voc√™ precisa de dois <code>input()</code>, e \nlembre-se de que <code>/</code> \ndivide e <code>except</code> precisa ser separado por tipo."
    },
    {
      "type": "exercise",
      "prompt": "3. Desafio: crie uma calculadora que pede opera√ß√£o (+, -, *, /), trata erros e mostra resultado ou mensagem.",
      "code_hint": "Voc√™ vai precisar de <code>if</code>/<code>elif</code> \npara cada opera√ß√£o e verificar se o usu√°rio digitou\n uma opera√ß√£o v√°lida."
    }
  ],
  "project": {
    "type": "project",
    "name": "Super Calculadora Segura",
    "description": "Crie uma calculadora que nunca quebra! Ela deve pedir dois n√∫meros, a opera√ß√£o, tratar erros de digita√ß√£o e divis√£o por zero. E se o usu√°rio errar? Mostre uma mensagem legal e pe√ßa de novo!",
    "goal": "Praticar `try/except`, m√∫ltiplos tipos de erro, mensagens personalizadas e l√≥gica de opera√ß√µes."
  },
  "video_suggestion": {
    "type": "video",
    "text": "V√≠deo explicando o uso de `try`, `except` e como deixar seu programa mais seguro:",
    "url": "https://www.youtube.com/watch?v=83dHYiwxOjg"
  }
}
